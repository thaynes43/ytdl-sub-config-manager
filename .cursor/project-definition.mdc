---
description:
globs:
alwaysApply: true
---

description: |
  Implementation guardrails for rebuilding the Peloton scraper as a modular, testable app that updates ytdl-sub configs.

globs:
  - "src/**/*.py"
  - "tests/**/*.py"
  - "Dockerfile"
  - "docker-compose.yml"
  - "pytest.ini"
  - "requirements.txt"
  - "README.md"
  - "docs/**/*.md"
  - "scripts/**/*.sh"
  - "scripts/**/*.ps1"
  - ".github/workflows/**/*.yaml"
  - ".vscode/**/*.json"

rules: |
  - Architecture
    - **IMPLEMENTED**: Flattened package structure under `src/` with subpackages: `config`, `core`, `io`, `webscraper`.
    - **IMPLEMENTED**: `main.py` as clean entry point delegating to `core/application.py` for business logic.
    - **IMPLEMENTED**: `config/` handles CLI parsing and configuration loading separately from business logic.
    - **IMPLEMENTED**: `core` (application, logging, models), `io` (episode parsing, file management, directory validation) modules complete.
    - **IMPLEMENTED**: `webscraper/` package with dependency injection architecture (ScraperFactory, ScraperManager, SessionManager).
    - **IMPLEMENTED**: Directory structure validation and repair system for handling corrupted 50/50 patterns.
    - **IMPLEMENTED**: Strategy pattern with dependency injection for extensible scraper, login, and parsing strategies.
    - Keep business logic out of the main entry point; compose dependencies explicitly.
    - Use pure functions and immutable dataclasses where feasible.
    - No module should import from `tests`.

  - Documentation Synchronization (CRITICAL)
    - **ALWAYS UPDATE DOCUMENTATION** when making code changes that affect:
      - Package structure or file organization
      - CLI commands, arguments, or usage examples
      - Configuration options or environment variables
      - Major features or functionality
      - Testing procedures or coverage requirements
    - **MANDATORY UPDATES** for any architectural changes:
      - Update `.cursor/project-definition.mdc` to reflect current implementation status
      - Update `README.md` project structure, usage examples, and feature descriptions
      - Update any affected documentation in `docs/` folder
    - **NO CODE CHANGES WITHOUT DOC UPDATES** - Documentation must be kept current with the codebase.

  - Types and Style
    - Add type hints to all public functions and class methods.
    - Prefer explicit names over abbreviations; avoid 1–2 letter variables.
    - Use guard clauses over deep nesting; handle errors early.
    - Replace prints with `logging` and structured messages.
    - **Method Organization**: Place high-level orchestration methods (like `run`, `main`, `execute`) at the top of classes, followed by the specific methods they call. This makes code flow easier to follow and understand.
    - **Logging Best Practices**: Use summary-based logging instead of per-iteration debug logs. Log meaningful summaries (e.g., "Parsed 184 episodes for 12 activities") rather than individual operations. Avoid tight-loop logging that creates noise.

  - Config and I/O
    - **IMPLEMENTED**: `config/config.py` handles multi-source config (env vars, CLI args, YAML files) with precedence.
    - **IMPLEMENTED**: `config/cli_config.py` manages CLI argument parsing separately from configuration loading.
    - **IMPLEMENTED**: Nested YAML configuration structure with sections: `application`, `logging`, `github`, `peloton` (with backwards compatibility for flat structure).
    - **IMPLEMENTED**: `io/file_manager.py` provides unified interface for filesystem and subscription parsing.
    - **IMPLEMENTED**: `io/directory_validator.py` pre-processes directories to fix corrupted structures and episode conflicts.
    - **IMPLEMENTED**: Episode numbering system with filesystem and subscription parsers in `io/` module.
    - **IMPLEMENTED**: Season = duration (minutes), Episode = sequential numbering per activity/instructor.
    - **IMPLEMENTED**: Robust handling of 50/50 directory corruption issues from legacy implementations.
    - **CRITICAL - Peloton Video Naming Convention**: The application follows the exact naming convention used by ytdl-sub for Peloton videos: `S{season}E{episode} - {upload_date} - {title}` with **NO LEADING ZEROS** (e.g., `S20E1` not `S20E001`). This naming convention is controlled by the `output_options.file_name` template in `subscriptions.yaml`. **⚠️ IMPORTANT**: If the `file_name` template changes, the conflict detection logic in `src/io/file_manager.py` must be updated accordingly to match the new pattern.
    - **Configuration Architecture**: Use nested YAML structure that groups related settings (application-wide, per-source, per-service). This scales better for multiple data sources and makes configuration more maintainable.
    - **YAML Path Formatting**: Use forward slashes for file paths in YAML (works on both Windows and Unix). Avoid backslashes in double quotes due to YAML escape character conflicts. Example: `"D:/path/to/file"` or `'D:\path\to\file'`.
    - Preserve YAML structure and key stability expected by ytdl-sub.

  - Web Scrapers
    - **IMPLEMENTED**: `webscraper/` package with abstract `ScraperStrategy` and `SessionManager` interfaces.
    - **IMPLEMENTED**: `webscraper/scraper_factory.py` creates scrapers from configuration with dependency injection.
    - **IMPLEMENTED**: `webscraper/scraper_manager.py` coordinates session and scraping strategies.
    - **IMPLEMENTED**: `webscraper/session_manager.py` handles browser session lifecycle with login strategies.
    - **IMPLEMENTED**: `webscraper/peloton/` contains Peloton-specific implementations (login, scraping).
    - **IMPLEMENTED**: Container-friendly Selenium configuration with headless mode and chromium drivers.
    - **IMPLEMENTED**: Modular design allows easy addition of new sources through strategy pattern.

  - Git Integration Services (GENERIC DESIGN)
    - **IMPLEMENTED**: `git_integration/` package with GitHub repository management.
    - **IMPLEMENTED**: `git_integration/repository_manager.py` handles Git operations (clone, pull, commit, push).
    - **IMPLEMENTED**: `git_integration/repository_manager.py` includes PullRequestManager for automated PR creation.
    - **IMPLEMENTED**: `git_integration/subscription_manager.py` for generic subscription file management.
    - **DESIGN PRINCIPLE**: Git integration is completely media-type agnostic - no Peloton-specific logic.
    - **DESIGN PRINCIPLE**: Works with any subscription file format (Peloton, YouTube, Spotify, etc.) via absolute file paths.
    - **DESIGN PRINCIPLE**: Same pull-edit-push workflow for all media types - only `application.subs-file` differs.
    - **IMPLEMENTED**: Auto-merge capability for PRs (configurable, defaults to manual merge).
    - **IMPLEMENTED**: Secure token-based authentication with masked logging.
    - **IMPLEMENTED**: Complete GitHub workflow integration in main application with disabled state logging.

  - Testing (CRITICAL - PROJECT IS TEST-GATED)
    - **ALL CODE CHANGES MUST PASS TESTS** - The CI/CD pipeline will fail if tests don't pass.
    - **NEW FUNCTIONALITY REQUIRES NEW TESTS** - Any new feature, class, or function must include corresponding test coverage.
    - **COVERAGE TARGET: 87%** - **ACHIEVED 87% COVERAGE** - Maintain at least 87% test coverage across the codebase. **DO NOT REGRESS BELOW 80%**.
    - **COVERAGE REGRESSION PREVENTION** - Before merging any PR:
      - Run `python -m pytest tests/ --cov=src --cov-report=term-missing` to check coverage
      - If coverage drops below 87%, add tests to maintain current level
      - If coverage drops below 80%, **BLOCK THE MERGE** until tests are added
      - Use `python -m pytest tests/ --cov=src --cov-fail-under=80` to enforce minimum coverage
    - **UPDATE EXISTING TESTS** - When modifying existing code, update the corresponding tests to reflect changes.
    - **RUN TESTS LOCALLY** - Always run `pytest tests/` before committing changes.
    - **IMPLEMENTED**: Comprehensive test suite with **316 passing tests** covering:
      - `tests/core/` - Application logic, configuration, logging, models (95%+ coverage)
      - `tests/config/` - CLI parsing and configuration loading (98%+ coverage)  
      - `tests/io/` - File operations, episode parsing, strategy loading (85%+ coverage)
      - `tests/webscraper/` - Web scraping, session management, factory patterns (95%+ coverage)
      - `tests/git_integration/` - Git operations, PR management, GitHub workflows (96%+ coverage)
      - Complete test isolation with proper mocking and fixtures
    - **IMPLEMENTED**: Helper scripts `scripts/run-tests.sh` and `scripts/run-tests.ps1`.
    - **HIGH-COVERAGE MODULES** - These modules have excellent coverage and should be maintained:
      - `src/config/config.py`: 98% coverage
      - `src/config/cli_config.py`: 99% coverage
      - `src/core/application.py`: 86% coverage
      - `src/main.py`: 97% coverage
      - `src/io/strategy_loader.py`: 100% coverage
      - `src/io/file_manager.py`: 88% coverage
      - `src/webscraper/models.py`: 100% coverage
      - `src/webscraper/scraper_factory.py`: 100% coverage
      - `src/webscraper/scraper_manager.py`: 100% coverage
      - `src/git_integration/models.py`: 100% coverage (generic GitHub models)
      - `src/git_integration/subscription_manager.py`: 98% coverage (generic subscription management)
      - `src/git_integration/repository_manager.py`: 93% coverage (generic Git operations)
    - Use `pytest`; keep Selenium and network calls mocked.
    - Mirror package structure in `tests/` and cover core/services thoroughly.
    - Include fixtures for sample media trees and YAML snippets.
    - **TEST-DRIVEN DEVELOPMENT** - Consider writing tests first, then implementing functionality.
    - **INTEGRATION TESTS** - Include integration tests for complete workflows (file parsing, episode numbering, etc.).
    - **EDGE CASE TESTING** - Test error conditions, invalid inputs, and boundary cases.

  - Docker/CI
    - **IMPLEMENTED**: Dockerfile with chromium/chromedriver, proper entrypoint, and semantic versioning.
    - **IMPLEMENTED**: Docker Compose configuration for local development.
    - **IMPLEMENTED**: GitHub Actions workflow with test-gated builds (tests must pass before Docker image builds).
    - **IMPLEMENTED**: Helper scripts in `scripts/` for Docker operations and version management.
    - **IMPLEMENTED**: VS Code debug configurations with .env file support.
    - Keep image minimal; use `--no-cache-dir` for pip and remove apt lists.
    - Semantic versioning with 0.1.0 initial version.

  - Security
    - **IMPLEMENTED**: Secure credential handling with .env files (git-ignored) and masked logging.
    - Never log secrets or tokens.
    - Access tokens and credentials only via environment variables.

  - Non-goals for MVP
    - No additional sources beyond Peloton yet; design must allow easy addition later.
    - No E2E browser tests; rely on unit tests with mocks.
